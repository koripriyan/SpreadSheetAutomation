/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.8/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}


apply plugin: 'java'
apply plugin: 'application'


repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
    testImplementation 'org.testng:testng:6.9.10'
    

    // https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java
    //implementation 'org.seleniumhq.selenium:selenium-java:4.21.0'
    implementation 'org.seleniumhq.selenium:selenium-java:4.26.0'
    
    implementation 'com.google.api-client:google-api-client:2.5.0'
    implementation 'com.google.oauth-client:google-oauth-client-jetty:1.34.1'
    implementation 'com.google.apis:google-api-services-sheets:v4-rev20230815-2.0.0'
    implementation 'com.google.http-client:google-http-client-jackson2:1.41.5'

    // Logging dependencies (optional for debugging)
    implementation 'org.slf4j:slf4j-api:1.7.32'
    implementation 'org.slf4j:slf4j-simple:1.7.32'  
}

// Apply a specific Java toolchain to ease working on different environments.
buildDir = 'build'

test {
    useTestNG() {
        useDefaultListeners = true // generates the test report
        suites "src/test/resources/testng.xml"
    }

    afterSuite { desc, result ->
            if (!desc.parent) {
                println "\nTEST RESULT: ${result.resultType}"
                println "TEST SUMMARY: RAN ${result.testCount} TESTS, " +
                        "${result.successfulTestCount} SUCCEEDED, " +
                        "${result.failedTestCount} FAILED, " +
                        "${result.skippedTestCount} SKIPPED"
            }
    }

    testLogging {
		events "PASSED", "SKIPPED", "FAILED", "STANDARD_OUT", "STANDARD_ERROR"
        exceptionFormat = 'full'

        // Optionally do:
        showStackTraces = true
	}

    testLogging.showStandardStreams = true
    test.outputs.upToDateWhen {false}

}

application {
    // Define the main class for the application.
    mainClass = 'googlesheet.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
